<div id="clientesapp">
    <div class="card m-4">
        <div class="card-body">
            <div class="d-grid gap-2 mt-2 d-md-flex justify-content-between align-items-center">
                <h3 class="me-md-2">Usuarios</h3>
                <div>
                    <button @click="openAddModal()" type="button" class="btn btn-primary btn-sm"><i
                            class="bi bi-file-earmark-plus"></i>
                    </button>
                </div>
            </div>
            <table class="table mt-2">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Nome</th>
                        <th scope="col">Email</th>
                        <th scope="col">Tipo</th>
                        <th scope="col">Cliente</th>
                        <th style="width: 1%" scope="col">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="item,index in usuarios" :key="index">
                        <th scope="row">\{{index+1}}</th>
                        <td>\{{item.nome}}</td>
                        <td>\{{item.email}}</td>
                        <td>\{{item.tipo}}</td>
                        <td>\{{item?.cliente ?item.cliente.nome:""}}</td>
                        <td>
                            <div class="dropdown">
                                <button class="btn " type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><button @click="openEditModal(item.id)" class="dropdown-item" type="button"><i
                                                class="bi bi-eye"></i>
                                            Visualisar</button></li>
                                    <li><button @click="remove(item.id)" class="dropdown-item text-danger"
                                            type="button"><i class="bi bi-trash"></i> Remover</button>
                                    </li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="adModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5 text-capitalize" id="staticBackdropLabel" v-if="action=='edit'">Editar
                    </h1>
                    <h1 class="modal-title fs-5 text-capitalize" id="staticBackdropLabel" v-else>Novo</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" v-model="usuario.nome">
                        <label for="floatingInput">Nome</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="email" class="form-control" v-model="usuario.email">
                        <label for="floatingInput">Email</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="password" class="form-control" v-model="usuario.password">
                        <label for="floatingInput">Senha</label>
                    </div>
                    <div class="form-floating mb-3">
                        <select class="form-select" v-model="usuario.clienteId">
                            <option selected>Selecione um Cliente</option>
                            <option v-for="item,index in clientes" :key="index" :value="item.id">\{{item.nome}}
                            </option>
                        </select>
                        <label for="floatingInput">Cliente</label>
                    </div>
                    <div class="form-floating mb-3">
                        <select class="form-select" v-model="usuario.tipo">
                            <option selected>Selecione um tipo</option>
                            <option v-for="item,index in tipos" :key="index" :value="item.id">\{{item.nome}}
                            </option>
                        </select>
                        <label for="floatingInput">Tipo</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal"><i
                            class="bi bi-x-lg"></i>
                        Cancelar</button>
                    <button type="button" @click="save" class="btn btn-primary btn-sm"><i class="bi bi-save"></i>
                        Salvar</button>
                </div>
            </div>
        </div>
    </div>

</div>

<script>

    var app = new Vue({
        el: '#clientesapp',
        data: {
            loadingPage: true,
            usuarios: [],
            clientes: [],
            tipos: [
                { id: 1, nome: "Admin" },
                { id: 2, nome: "Monitor" },
            ],
            usuario: {},
            addModal: {},
            action: "",
        },
        methods: {
            async loadPage() {
                await Promise.all([await this.loadClientes(), await this.loadUsuarios()])
            },
            async loadClientes() {
                const result = await fetch(`/admin/clientes/getAll`)
                const data = await result.json()
                this.clientes = data;
            },
            async loadUsuarios() {
                const result = await fetch(`/admin/usuarios/getAll`)
                const data = await result.json()
                this.usuarios = data;
            },
            async openAddModal() {
                this.action = "add";
                this.usuario = {}
                this.addModal = new bootstrap.Modal('#adModal')
                this.addModal.show()
            },
            async openEditModal(id) {
                this.action = "edit";
                this.usuario = await this.getUsuario(id)
                this.addModal = new bootstrap.Modal('#adModal')
                this.addModal.show()
            },
            async save() {
                let validaResult = validaOjeto(this.cliente);
                if (validaResult.length > 0) {
                    ShowMessage("warning", "Campos obrigatórios", validaResult.join("<br>"))
                    return
                }

                let url = `/admin/usuarios/add`
                if (this.action == 'edit') {
                    url = `/admin/usuarios/edit/${this.cliente.id}`
                }
                let payload = { ... this.usuario }
                const result = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ ...payload }),
                });
                if (result.ok) {
                    const data = await result.json()
                    this.loadPage();
                    this.usuario = {}
                    this.addModal.hide()
                    showMessageToast('success', 'item adicionado!')
                }
            },
            async remove(id) {
                let questionResult = await ShowQuestion("Deseja realmente remover este item?");
                if (!questionResult)
                    return
                const result = await fetch(`/admin/usuarios/remove/${id}`);
                if (result.ok) {
                    this.loadPage();
                    showMessageToast('success', 'item removido!')
                }
            },
            async getUsuario(id) {
                const result = await fetch(`/admin/usuarios/getOne/${id}`)
                const data = await result.json()
                return data;
            }

        },
        mounted() {
            this.loadPage();
        }
    })

</script>