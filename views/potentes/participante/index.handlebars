<div id="gruposapp">
    <div class="d-grid gap-2 d-md-flex justify-content-between align-items-center">
        <h2 class="me-md-2">Participante</h2>
        <div>
            <a :href="'/grupos/detail/'+participante.grupoId" class="btn btn-primary" type="button"><i
                    class="bi bi-arrow-left"></i></a>
        </div>
    </div>
    <div><span class="fw-semibold">Nome:</span> \{{participante.nome}}</div>
    <div><span class="fw-semibold">Email:</span> \{{participante.email}}</div>
    <hr>
    <div class="d-grid gap-2 mt-2 d-md-flex justify-content-between align-items-center">
        <h3 class="me-md-2">Avaliação da dinamica</h3>
    </div>
    <div v-if="participante?.resposta && participante.resposta.length == 0">
        <span>Nenhuma resposta em contrada</span>
    </div>
    <ul class="list-group " v-else>
        <li v-for="item,index in analise" :key="index"
            class="list-group-item d-flex justify-content-between align-items-start">
            <div class="ms-2 me-auto">
                <div class="fw-bold">\{{item.sigla+" - "+item.titulo}}</div>
                <ul>
                    <li v-for="listitem,idx in item.texto[Math.floor(percentualLetra[item.id]/25)-1||0]" :key="idx">
                        \{{listitem}}
                    </li>
                </ul>
            </div>
            <span class="badge bg-primary rounded-pill">\{{(Math.floor(percentualLetra[item.id])||0)+"%"}}</span>
        </li>
    </ul>
</div>

<script>

    var app = new Vue({
        el: '#gruposapp',
        data: {
            loadingPage: true,
            participante: {},
            analise: {},
            percentualLetra: {}

        },
        methods: {
            async loadPage() {
                const result = await fetch(`/participantes/getOne/{{participanteId}}`)
                const data = await result.json()
                this.participante = data;
                if (this.participante.resposta.length > 0) {
                    this.percentualLetra = await this.getPercentages(this.participante.resposta.map(o => o.valor));
                    await this.getAnalise();
                }
            },
            async getAnalise() {
                const result = await fetch(`/participantes/getAnalise`)
                const data = await result.json()
                this.analise = data;
            },
            async getPercentages(array) {
                const lettersCount = {};
                for (const letter of array) {
                    if (!lettersCount[letter]) {
                        lettersCount[letter] = 0;
                    }
                    lettersCount[letter]++;
                }

                const totalLetters = array.length;
                const percentages = {};
                for (const [letter, count] of Object.entries(lettersCount)) {
                    percentages[letter] = (count * 100 / totalLetters);
                }

                return percentages;
            }

        },
        mounted() {
            this.loadPage();
        }
    })

</script>