<div id="gruposapp">

    <div class="d-grid gap-2 d-md-flex justify-content-between align-items-center">
        <h2 class="me-md-2">Grupo <span
                :class="'fs-6 badge bg-'+status.find(o=>o.id ==grupo.status)?.tag||'' ">\{{status.find(o=>o.id
                ==grupo.status)?.descricao||""}}</span></h2>
        <div>
            <a href="../" class="btn btn-outline-primary" type="button"><i class="bi bi-arrow-left"></i></a>
        </div>
    </div>
    <div><span class="fw-semibold">Data:</span> \{{grupo?.data?new Date(grupo.data).toLocaleDateString():""}}</div>
    <div><span class="fw-semibold">Dinamica:</span> \{{grupo.jogo?.dinamica ? grupo.jogo.dinamica.nome:""}}
    </div>
    <div><span class="fw-semibold">Jogo:</span> \{{grupo.jogo?.nome||""}}</div>
    <div><span class="fw-semibold">Cliente:</span> \{{grupo.cliente? grupo.cliente?.nome:""}}</div>
    <div><span class="fw-semibold">Monitor:</span> \{{grupo.user?grupo.user.nome:""}}</div>
    <div v-if="grupo.status>1"><span class="fw-semibold">Duração:</span> \{{grupo.duracao}}</div>
    <hr>
    <div class="d-grid gap-2 mt-2 d-md-flex justify-content-between align-items-center">
        <h4 class="me-md-2">Lista Participantes</h4>
        <div>
            <button @click="openParicipanteModal()" type="button" class="btn btn-primary btn-sm"><i
                    class="bi bi-plus"></i>
                Participante</button>
        </div>
    </div>
    <table class="table mt-2">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Nome</th>
                <th scope="col">Email</th>
                <th scope="col">Respostas</th>
                <th style="width: 1%" scope="col">Ações</th>
            </tr>
        </thead>
        <tbody>
            <tr v-if="carregando">
                <td colspan="8" class="text-center"><i class="bi bi-search"></i> ...Carregando lista</td>
            </tr>
            <tr v-else-if="!carregando && grupo?.participantes?.length==0">
                <td colspan="8" class="text-center"><i class="bi bi-database-x"></i> Nehum item encontrado</td>
            </tr>
            <tr v-for="item,index in grupo.participantes" :key="index">
                <th scope="row">\{{index+1}}</th>
                <td>\{{item.nome||""}}</td>
                <td>\{{item.email||""}}</td>
                <td>\{{item?.resposta ? item.resposta.length : 0}}</td>
                <td>
                    <div class="btn-group btn-group-sm" role="group" aria-label="Basic outlined example">
                        <a type="button" :href="'/participantes/detail/'+item.id" class="btn btn-outline-info"
                            title="Visualisar"><i class="bi bi-eye"></i></a>
                        <button type="button" @click="removeParticipante(item.id)" class="btn btn-outline-danger"
                            title="Remover"><i class="bi bi-trash"></i></button>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>


    <div class="d-grid gap-2 m-4">
        <a href="/desafios/emgrupo/{{grupoId}}" type="button"
            :class="'btn btn-outline-primary btn-sm '+((grupo?.participantes && grupo.participantes.length==0) || grupo.status!=1?'disabled' :'') ">
            <i class="bi bi-box-arrow-up-right"></i> Iniciar desafio gerenciado</a>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="addParticipante" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
        aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content bg-secondary">
                <div class="modal-header">
                    <h1 class="modal-title fs-5 text-capitalize" id="staticBackdropLabel">incluir participante</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" v-model="participante.nome"
                            placeholder="name@example.com">
                        <label for="floatingInput">Nome</label>
                    </div>
                    <div class="form-floating mb-3">
                        <input type="email" class="form-control" v-model="participante.email"
                            placeholder="name@example.com">
                        <label for="floatingInput">Email</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal"><i
                            class="bi bi-x-lg"></i>
                        Cancelar</button>
                    <button type="button" disabled v-if="salvando" class="btn btn-primary btn-sm">
                        <i class="bi bi-hourglass-split"></i>
                        Salvando</button>
                    <button type="button" @click="saveParticipante" v-else class="btn btn-primary btn-sm"><i
                            class="bi bi-save"></i>
                        Salvar</button>
                </div>
            </div>
        </div>
    </div>

</div>

<script>

    var app = new Vue({
        el: '#gruposapp',
        data: {
            loadingPage: true,
            grupo: [],
            participante: { nome: "", email: "" },
            addParticipanteModal: {},
            status: [
                { id: 1, descricao: "Aberto", tag: "primary" },
                { id: 2, descricao: "Em Analise", tag: "warning" },
                { id: 3, descricao: "Concluído", tag: "success" },
            ],
            carregando: false,
            salvando: false
        },
        methods: {
            async loadPage() {
                this.carregando = true;
                try {
                    const result = await fetch(`/grupos/getOne/{{grupoId}}`)
                    const data = await result.json()
                    this.grupo = data;

                    if (this.grupo.status > 1) {
                        this.grupo.duracao = await this.calcularDuracao(this.grupo.inicio,this.grupo.termino);
                    }

                    this.carregando = false;
                } catch (e) {
                    console.log(e)
                    this.carregando = false;
                }
            },
            async openParicipanteModal() {
                this.participante = { nome: "", email: "" }
                this.addParticipanteModal = new bootstrap.Modal('#addParticipante')
                this.addParticipanteModal.show()
            },
            async saveParticipante() {
                this.salvando = true;
                showMessageToast('success', 'Salvando informações!')
                this.addParticipanteModal.hide()
                try {
                    let validaResult = validaOjeto(this.participante);

                    if (validaResult.length > 0) {
                        ShowMessage("warning", "Campos obrigatórios", validaResult.join("<br>"))
                        this.salvando = false;
                        return
                    }

                    const result = await fetch(`/participantes/add/{{grupoId}}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ data: this.participante }),
                    });
                    if (!result.ok) {
                        showMessageToast('error', 'operação não pode ser executada!')
                        this.salvando = false;
                        return
                    }
                    const data = await result.json()
                    await this.loadPage();
                    this.participante = {}
                    showMessageToast('success', 'participante adicionado!')
                    this.salvando = false;
                } catch (e) {
                    console.log(e)
                    this.salvando = false;
                }


            },
            async copiarLinkResposta(email) {
                await navigator.clipboard.writeText(`${location.host}/desafios/solo/${this.grupo.id}/${email}`)
                showMessageToast('success', 'Link copiado!')

            },
            async removeParticipante(id) {
                let questionResult = await ShowQuestion("Deseja realmente remover este grupo?");
                if (!questionResult)
                    return

                const result = await fetch(`/participantes/remove/${this.grupo.id}/${id}`);
                if (!result.ok) {
                    showMessageToast('error', 'operação não pode ser executada!')
                    return
                } this.loadPage();
                showMessageToast('success', 'participante removido!')

            },
            async calcularDuracao(inicio, termino) {
                const inicioDate = new Date(inicio);
                const terminoDate = new Date(termino);

                const diferencaEmMilissegundos = terminoDate - inicioDate;

                const horas = Math.floor(diferencaEmMilissegundos / 3600000);
                const minutos = Math.floor((diferencaEmMilissegundos % 3600000) / 60000);
                const segundos = Math.floor((diferencaEmMilissegundos % 60000) / 1000);

                return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}:${segundos.toString().padStart(2, '0')}`;
            },

        },
        mounted() {
            this.loadPage();
        }
    })

</script>