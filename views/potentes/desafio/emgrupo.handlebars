<div id="desafioapp">
    <div class="d-grid gap-2 d-flex justify-content-end align-items-end">
        <h2 class="form-label d-block fs-5">Dinamica: \{{jogo.dinamica?.nome||""}} - \{{jogo.nome||""}}</h2>
        <div>
            <div class="dropdown">
                <button class="btn " type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-three-dots-vertical"></i>
                </button>
                <ul class="dropdown-menu">
                    <li><a href="/grupos/detail/{{grupoId}}" class="dropdown-item" type="button">
                            <i class="bi bi-arrow-left"></i> Voltar</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="mb-3" v-for="item,idx in desafioList" :key="idx" v-show="idx==currentStep">
        <div class="card bg-light mx-4">
            <div class="card-body">
                <h3 class="card-title fs-3">\{{item.titulo}}</h3>
                <span class="fst-italic card-text">\{{item.descricao}}</span>
            </div>
        </div>

        <div class="card bg-light m-4" v-for="participante,idx3 in participantes" :key="idx3">
            <div class="card-body">
                <h5 class="card-title"><i class="bi bi-person-circle"></i><span class="text-capitalize">
                        \{{participante.nome}}</span></h5>
                <p class="card-text" style="display: none;">
                    \{{participante.resposta[idx].desafioId = item.id}}
                </p>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item" v-for="opcao,idx2 in item.opcoes" :key="idx2">
                    <input class="form-check-input" :id="participante.nome+participante.id+''+opcao.valor+(idx+1)"
                        type="radio" :name="'desafio'+participante.nome+(idx+1)+''+participante.id" :value="opcao.valor"
                        v-model="participante.resposta[idx].valor" />
                    <label class="form-check-label"
                        :for="participante.nome+participante.id+''+opcao.valor+(idx+1)">\{{opcao.descricao}}</label>
                </li>

            </ul>
        </div>

        <div class="d-flex gap-2 m-4">
            <button :disabled="currentStep==0 || enviando" class="btn btn-warning btn-sm flex-fill" type="button"
                @click="anteriorDesafio"><i class="bi bi-arrow-left"></i> Anterior</button>
            <button v-if="currentStep==desafioList.length-1" :disabled="enviando"
                class="btn btn-success btn-sm flex-fill" type="button" @click="enviarResposta"><i
                    class="bi bi-send"></i> Enviar</button>
            <button v-else class="btn btn-primary btn-sm flex-fill" type="button" @click="proximoDesafio">Proximo<i
                    class="bi bi-arrow-right"></i> </button>
        </div>
    </div>
</div>

<script>
    class LocalStorageCRUD {
        constructor(databaseName) {
            this.databaseName = databaseName;
            this.database = JSON.parse(localStorage.getItem(databaseName)) || [];
        }

        save() {
            localStorage.setItem(this.databaseName, JSON.stringify(this.database));
        }

        create(item) {
            this.database.push(item);
            this.save();
        }

        read(id) {
            if (id === undefined) {
                return this.database;
            } else {
                return this.database.find((item) => item.id === id);
            }
        }

        update(id, newItem) {
            const index = this.database.findIndex((item) => item.id === id);
            if (index !== -1) {
                this.database[index] = { ...this.database[index], ...newItem };
                this.save();
                return true;
            }
            return false;
        }

        delete(id) {
            const index = this.database.findIndex((item) => item.id === id);
            if (index !== -1) {
                this.database.splice(index, 1);
                this.save();
                return true;
            }
            return false;
        }
    }

    var app = new Vue({
        el: '#desafioapp',
        data: {
            loadingPage: true,
            desafioList: [],
            participantes: [],
            jogo: {},
            currentStep: 0,
            enviando: false,
            dataResposta: new LocalStorageCRUD('dataResposta{{grupoId}}')
        },
        methods: {
            async loadPage() {
                await this.getGrupo();
                let objetoArmazenado = this.dataResposta.read(1);
                if (objetoArmazenado) {
                    const { participantes, currentStep } = objetoArmazenado;
                    this.participantes = participantes;
                    this.currentStep = currentStep;
                } else {
                    this.dataResposta.create({ id: 1, participantes: this.participantes, currentStep: this.currentStep, inicio: new Date() })
                }
            },
            async getGrupo() {
                const result = await fetch(`/grupos/getOne/{{grupoId}}`)
                const data = await result.json()
                this.jogo = data.jogo;
                this.desafioList = data.jogo.desafios.sort((a, b) => a.id - b.id)
                this.participantes = data.participantes;

                for (const item of this.participantes) {
                    item.resposta = this.desafioList.map(o => { return { valor: "", desafioId: "" } })
                }

                this.participantes
                console.log(data)
            },
            async anteriorDesafio() {
                this.currentStep--;
            },
            async proximoDesafio() {
                let isvalid = this.participantes.filter(o => !o.resposta[this.currentStep].valor)
                if (isvalid.length > 0) {
                    showMessageToast('warning', 'preencha uma das opções')
                    return
                }
                this.currentStep++;
                this.dataResposta.update(1, { participantes: this.participantes, currentStep: this.currentStep, })
            },
            async enviarResposta() {
                try {
                    this.enviando = true

                    let isvalid = this.participantes.filter(o => !o.resposta[this.currentStep].valor)
                    if (isvalid.length > 0) {
                        showMessageToast('warning', 'preencha uma das opções')
                        this.enviando = false
                        return
                    }

                    showMessageToast('success', 'Enviando informações')
                    const result = await fetch(`/desafios/addRespostaGrupo/{{grupoId}}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ participantes: this.participantes }),
                    });

                    if (!result.ok) {
                        showMessageToast('error', 'Erro ao executar esta ação!')
                        this.enviando = false;
                        return
                    }
                    let objetoArmazenado = this.dataResposta.read(1);

                    const closegrupo = await fetch(`/grupos/edit/{{grupoId}}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            status: 2, userId: '{{ user.id }}',inicio: objetoArmazenado.inicio ,termino: new Date()})
                        })

                    if(!closegrupo.ok) {
                        showMessageToast('error', 'Erro ao executar esta ação!')
                        this.enviando = false;
                        return
                    }

                    this.dataResposta.delete(1);
                    location.replace("/grupos/detail/{{grupoId}}")

            } catch(e) {
                console.log(e)
                this.enviando = false
            }
        },
    },
        mounted() {
        this.loadPage();
    }
    })




</script>